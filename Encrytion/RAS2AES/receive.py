from Cryptodome.Cipher import PKCS1_OAEP, AES
from Cryptodome.PublicKey import RSA

res_key =  b'U\x07\xe1$To\x13\x1c\xd8\xf9\xeb\x17oQ4\xc0\xaf\xf5\xd2^ \x90\xd4.\x86V\x1d\x1aa\x89\xacUEL\xe5\xec\x1d_\xfe\xd4\xd2\xfe\xaf\x88\x82\xad\x83\xaf\xf7\xcbW\xcd\x8e\x86\xe0\x14I\xd3\xac\xce\x18\x8c\xe7\xa5\x7f\x13\x7f\xb4\xefn\xc4\xa9gn\r\x93,\\\x1d\xcc\x17\x11s3\xe1\xbe\xd9\x10\xfc\xb8\xc2!\xcfga\x0c\xc3\x05\x9b\x99#\xa0uEa<\x1e--\x9b\xad[\xcc+d\x01><_9\xc7\xf3\x89b&\xfa\x19b\xe9n\xf3U\x83n\x0c\xcc\xacyuc\xd7U=\xb4\xaff\xa6L\xa1\xe8\'Hq\x91a\xba]7\xb7?ce\x11\x86\xc1o\xad\x89n\x88\xa2\n\xab\xf7?\xea\x12\xcb\xd43\xfc\x9aG\xafJJ\xc6\xae\x85\xe2G\xde\xccF\x13>G\xb6!\xa8\x90U\x98\x8d\x82T\xdbTV\xba\xcbH\x89\xf4\xbc\x1a\xee\xd3[\xe6u1n$v\xfe\xf5p\x03\x96\xb0\x0f4\xd2\xac\x92\x804@3\x15\x8e\xd6\x99\xb0\xa1@v"k7\x07y`\x1b\xe1'

# res_key = b'\x95[\xc5\xf6\xae\x7f\xac\xc4q\x08\xa2\xc6\xdaN\xe3P~%\tY\xc5\xe8\x1f\xe1\xac\x86\xddU9\xdb\xfbt\xb3\xac\xcb\x86^\xeeK\x96k|\xb2\xe5\x844\x92g\xcc\xa7p\xd3\xdc\x1c\xb2\xb4\x98\x0bt\xc5\x18B\x88\x93b\xba|l\x99\x99<N\x95\xe3\xcfD^)x\xb8rM9\xd5\xf2wU\xd7\x08\xae\xfdS\x8a\x8d\x02?\xadi\xfb\xb3\xd3/\xc0s\xacR.\x16<\xe5\xd1\x11KX{\x7f\x87\xc2\x04\xf8\x96\x97P\x18\x93\xffG\xb9\x93\x1a\x12\xcc\x06+\xa9\xad\x94\xe3\xa0\x1cg\xad\xae\xaf\xc4F\x04`[Ln\xff\xd5\xccXF\xa1\xe6\xf5\xd4\x87*\x8c)h\xbb\x94\x0c\x9a\xbf\x8f\xb9Z!\x8eG\x9cu#\xd8G+\x86\xd8VZ\xcd%}\xad\x1b\xfb\xf3\xfbIu\xea\x98r\xcf\n\r\xf1Q\xaf\x16rJ6\xe2\xf5\xe5<?C\x0f\x7fb\xdeV\xbd~=[\x1d\xe8\xcc@\x1a\xdeZ\xf0\x9f.z\x15T\xe3\xe6\xaf!\x0e\x8fAN\xbf\xe8}\x89\xba-\xe2\xd4P"\x81'

def rsa_decrypt(msg):
    """
    解密
    :return:
    """
    private_key = RSA.import_key(open('prikey.pem').read())
    print(f'加密过的信息： {msg}')
    cipher = PKCS1_OAEP.new(private_key)
    res = cipher.decrypt(msg).decode('utf-8')
    print("解密key: ",res)
    return res


key = rsa_decrypt(res_key).encode()

def aes_encrypt():
    file_in = open("encrypted", "rb")
    nonce, tag, ciphertext = [ file_in.read(x) for x in (16, 16, -1) ]
    cipher = AES.new(key, AES.MODE_EAX, nonce)
    data = cipher.decrypt_and_verify(ciphertext, tag)
    print('解密数据: ', data.decode())

aes_encrypt()